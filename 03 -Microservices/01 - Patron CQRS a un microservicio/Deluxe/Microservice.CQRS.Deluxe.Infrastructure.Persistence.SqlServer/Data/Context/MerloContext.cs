// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microservice.CQRS.Deluxe.Infrastructure.Persistence.SqlServer.Data.Entities;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Microservice.CQRS.Deluxe.Infrastructure.Persistence.SqlServer.Data.Context
{
    public partial class MerloContext : DbContext
    {
        public MerloContext()
        {
        }

        public MerloContext(DbContextOptions<MerloContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Court> Courts { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.Property(e => e.Length).HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RequestId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Court)
                    .WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.CourtId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Courts");
            });

            modelBuilder.Entity<Court>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FirstSlot).HasDefaultValueSql("((8))");

                entity.Property(e => e.LastSlot).HasDefaultValueSql("((20))");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}