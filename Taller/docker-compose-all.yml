services:
########################################################## microservices.demo.auth.db ##################################################################################
  microservices.demo.auth.db:
    image: ${DOCKER_REGISTRY-}microservicesdemoauthdb
    container_name: Microservices.Demo.Auth.db    
    ports:
       - 27018:27017
    build:
      context: .
      dockerfile: db/Microservices.Demo.Auth.DB/Dockerfile
    networks:
     - backend
########################################################## microservices.demo.policy.db ##################################################################################
#ConnectionString
#microservices.demo.policy.db
  microservices.demo.policy.db:
    image: ${DOCKER_REGISTRY-}microservicesdemopolicydb
    container_name: Microservices.Demo.Policy.db    
    ports:
       - 14332:1433
    volumes:
      - ./db/Microservices.Demo.Policy.DB/Docker/Data:/var/opt/mssql/Microservices.Demo.Policy/data
    build:
      context: .
      dockerfile: db/Microservices.Demo.Policy.DB/Dockerfile
    networks:
      - backend
########################################################## microservices.demo.pricing.db ##################################################################################
  microservices.demo.pricing.db:
    image: ${DOCKER_REGISTRY-}microservicesdemopricingdb
    container_name: Microservices.Demo.Pricing.db    
    ports:
       - 54321:5432
    build:
      context: .
      dockerfile: db/Microservices.Demo.Pricing.DB/Dockerfile      
    networks:
      - backend
########################################################## microservices.demo.product.db ##################################################################################
#ConnectionString
#microservices.demo.product.db
  microservices.demo.product.db:
    image: ${DOCKER_REGISTRY-}microservicesdemoproductdb
    container_name: Microservices.Demo.Product.db    
    ports:
       - 14331:1433
    volumes:
      - ./db/Microservices.Demo.Product.DB/Docker/Data:/var/opt/mssql/Microservices.Demo.Product/data
    build:
      dockerfile: db/Microservices.Demo.Product.DB/Dockerfile
      context: .
    networks:
      - backend
########################################################## microservices.demo.discoveryserver #############################################################################
  microservices.demo.discoveryserver:
    image: ${DOCKER_REGISTRY-}microservicesdemodiscoveryserver
    container_name: Microservices.Demo.DiscoveryServer    
    ports:
       - 8761:8761
    environment:
       - OTEL_SERVICE_NAME=Microservices.Demo.DiscoveryServer
       - OTEL_EXPORTER_OTLP_ENDPOINT=http://microservices.demo.jaeger:4317
    build:
      context: app/Infrastructure/Microservices.Demo.DiscoveryServer
      dockerfile: Dockerfile
    networks:
      - backend
########################################################## microservices.demo.configserver ################################################################################
  microservices.demo.configserver:
    image: ${DOCKER_REGISTRY-}microservicesdemoconfigserver
    container_name: Microservices.Demo.ConfigServer    
    ports:
       - 8889:8889
    environment:
       - OTEL_SERVICE_NAME=Microservices.Demo.ConfigServer
       - OTEL_EXPORTER_OTLP_ENDPOINT=http://microservices.demo.jaeger:4317
    build:
      context: app/Infrastructure/Microservices.Demo.ConfigServer
      dockerfile: Dockerfile
    networks:
      - backend
########################################################## microservices.demo.rabbitmq ####################################################################################
  microservices.demo.rabbitmq:
    image: rabbitmq:3.13.1-management
    container_name: Microservices.Demo.Rabbitmq    
    ports:
       - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin    
    networks:
      - backend
########################################################## microservices.demo.client.web.apigateway ######################################################################
  microservices.demo.client.web.apigateway:
    image: ${DOCKER_REGISTRY-}microservicesdemoclientwebapigateway
    container_name: Microservices.Demo.Client.Web.ApiGateway    
    environment:      
      - ASPNETCORE_URLS=http://::80
    ports:
      - 44399:80
    build:
      context: app/Infrastructure/Microservices.Demo.Client.Web.ApiGateway
      dockerfile: Dockerfile
    networks:
      - backend
    restart: on-failure
########################################################## microservices.demo.auth.api ###################################################################################
  microservices.demo.auth.api:
    image: ${DOCKER_REGISTRY-}microservicesdemoauthapi
    container_name: Microservices.Demo.Auth.Api    
    environment:
      - ASPNETCORE_URLS=http://::80
    ports:
      - 44398:80      
    build:
      context: app/Infrastructure/Microservices.Demo.Auth.API
      dockerfile: Dockerfile
    networks:
      - backend
    restart: on-failure
######################################################################### elastic search ##################################################################################
##http://localhost:9200/_cat/nodes?v=true&pretty
##http://localhost:9200/_cluster/health?pretty
  microservices.demo.elasticsearch:
    container_name: microservices.demo.elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    ports:
      - 9200:9200 
      - 9300:9300
    environment:      
      - ELASTIC_PASSWORD=elastic      
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        hard: -1
        soft: -1    
    volumes:
      - ./app/infrastructure/elk/microservices.demo.elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./app/infrastructure/elk/microservices.demo.elasticsearch/es-data:/usr/share/elasticsearch/data
    networks:
      - backend  
################################################################################# kibana ##################################################################################      
  microservices.demo.kibana:
    container_name: microservices.demo.kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    ports:
      - 5601:5601    
    volumes:
      - ./app/infrastructure/elk/microservices.demo.kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - backend
    depends_on:
      - microservices.demo.elasticsearch    
######################################################################### logstash ##################################################################################
  microservices.demo.logstash:
    container_name: microservices.demo.logstash
    image: docker.elastic.co/logstash/logstash:8.13.4
    ports:
      - 5044:5044
      - 28080:28080
    volumes:
      - ./app/infrastructure/elk/microservices.demo.logstash/conf.d/:/usr/share/logstash/pipeline/:ro
      - ./app/infrastructure/elk/microservices.demo.logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    networks:
      - backend
    depends_on:
      - microservices.demo.elasticsearch
    restart: on-failure
######################################################################### APM ##################################################################################
  microservices.demo.apm-server:
    container_name: microservices.demo.apm-server    
    image: docker.elastic.co/apm/apm-server:8.13.4
    ports:
      - 8200:8200  
    volumes:
      - ./app/infrastructure/elk/microservices.demo.apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
    networks:
      - backend
    depends_on:
      - microservices.demo.elasticsearch
    restart: on-failure
######################################################################### jaeger ##################################################################################
  microservices.demo.jaeger:
    container_name: microservices.demo.jaeger
    image: jaegertracing/all-in-one:1.40
    ports:            
      - 16686:16686
      - 4317:4317 
    environment:      
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - backend    
    restart: on-failure
########################################################## microservices.demo.product.api ################################################################################
  microservices.demo.product.api:
    image: ${DOCKER_REGISTRY-}microservicesdemoproductapi
    #container_name: Microservices.Demo.Product.Api
    deploy:
      replicas: 1
    environment:      
      - ASPNETCORE_URLS=http://::80    
    build:
      context: .
      dockerfile: app/Domain/Microservices.Demo.Product.API/Dockerfile
    networks:
      - backend
    restart: on-failure
########################################################## microservices.demo.pricing.api ################################################################################
  microservices.demo.pricing.api:
    image: ${DOCKER_REGISTRY-}microservicesdemopricingapi
    #container_name: Microservices.Demo.Pricing.Api    
    deploy:
      replicas: 1
    environment:      
      - ASPNETCORE_URLS=http://::80    
    build:
      context: .
      dockerfile: app/Domain/Microservices.Demo.Pricing.API/Dockerfile
    networks:
      - backend
    restart: on-failure
########################################################## microservices.demo.policy.api #################################################################################
  microservices.demo.policy.api:
    image: ${DOCKER_REGISTRY-}microservicesdemopolicyapi
    #container_name: Microservices.Demo.Policy.Api    
    deploy:
      replicas: 1
    environment:      
      - ASPNETCORE_URLS=http://::80    
    build:
      context: .
      dockerfile: app/Domain/Microservices.Demo.Policy.API/Dockerfile
    networks:
      - backend
    restart: on-failure
########################################################## Client Angular #################################################################################
  microservices.demo.client.web:
    container_name: microservices.demo.client.web
    image: microservices.demo.client.web
    build:
      context: app/Client/microservices.demo.client.web
      dockerfile: Dockerfile    
    ports:
      - 8081:80      
    networks:
      - backend   
########################################################## networks #######################################################################################################
networks:
  backend:
    name: backend
    driver: bridge